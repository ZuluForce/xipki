<?xml version="1.0" encoding="utf-8"?>
<!--
 Copyright (c) 2014 Lijun Liao
 -->
<xs:schema xmlns="http://xipki.org/xmlprofile/v2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:jxb="http://java.sun.com/xml/ns/jaxb" targetNamespace="http://xipki.org/xmlprofile/v2" elementFormDefault="qualified" version="1.0" jxb:version="2.0">
  <xs:annotation>
    <xs:appinfo>
      <jxb:schemaBindings>
        <jxb:package name="org.xipki.ca.certprofile.internal.x509.jaxb"/>
      </jxb:schemaBindings>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="X509Profile" type="X509ProfileType"/>
  <xs:complexType name="X509ProfileType">
    <xs:sequence>
      <xs:element name="appInfo" type="anyType" minOccurs="0"/>
      <xs:element name="version" type="xs:int">
        <xs:annotation>
          <xs:documentation>
            version of the certificate, e.g. 3 for v3 certificate.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="signatureAlgorithms" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="algorithm" type="oidWithDescType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="ca" type="xs:boolean"/>
      <xs:element name="validity" type="xs:string" minOccurs="0"/>
      <xs:element name="notBeforeTime" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            Format of the notBefore field.
              current: current time
              midnight: mid night, namely 00:00:00 UTC 
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="duplicateKey" type="xs:boolean" minOccurs="0"/>
      <xs:element name="duplicateSubject" type="xs:boolean" minOccurs="0"/>
      <xs:element name="serialNumberInReq" type="xs:boolean" minOccurs="0"/>
      <xs:element name="specialBehavior" type="xs:string" minOccurs="0">
        <xs:annotation>
          <xs:documentation>
            some certificate profiles must be processed specially. Currently 
            defined special behavior is gematik_gSMC_K.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="parameters" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="parameter" type="nameValueType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="keyAlgorithms" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="algorithm" type="algorithmType" maxOccurs="10"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="subject" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="dnBackwards" type="xs:boolean" default="false" minOccurs="0"/>
            <xs:element name="incSerialNrIfSubjectExists" type="xs:boolean" default="false" minOccurs="0"/>
            <xs:element name="rdn" type="rdnType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="extensions" type="extensionsType"/>
      <xs:any namespace="##other" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="raOnly" type="xs:boolean" default="false" use="optional"/>
    <xs:attribute name="qaOnly" type="xs:boolean" default="false" use="optional"/>
  </xs:complexType>
  <xs:complexType name="nameValueType">
    <xs:sequence>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="algorithmType">
    <xs:sequence>
      <xs:element name="algorithm" type="oidWithDescType" maxOccurs="unbounded"/>
      <xs:choice minOccurs="0">
        <xs:element name="RSAParameters" type="RSAParametersType"/>
        <xs:element name="RSAPSSParameters" type="RSAPSSParametersType"/>
        <xs:element name="DSAParameters" type="DSAParametersType"/>
        <xs:element name="ECParameters" type="ECParametersType"/>
        <xs:element name="DHParameters" type="DHParametersType"/>
        <xs:element name="GostParameters" type="GostParametersType"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="rangesType">
    <xs:sequence>
      <xs:element name="range" type="rangeType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="rangeType">
    <xs:attribute name="min" type="xs:int" use="optional"/>
    <xs:attribute name="max" type="xs:int" use="optional"/>
  </xs:complexType>
  <xs:complexType name="RSAParametersType">
    <xs:sequence>
      <xs:element name="modulusLength" type="rangesType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DSAParametersType">
    <xs:sequence>
      <xs:element name="pLength" type="rangesType" minOccurs="0"/>
      <xs:element name="qLength" type="rangesType" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DHParametersType">
    <xs:complexContent>
      <xs:extension base="DSAParametersType">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="RSAPSSParametersType">
    <xs:complexContent>
      <xs:extension base="RSAParametersType">
        <xs:sequence>
          <xs:element name="hashAlgorithm" type="oidWithDescType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="maskGenAlgorithm" type="oidWithDescType" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="saltLength" type="xs:int" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="trailerField" type="xs:int" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ECParametersType">
    <xs:sequence>
      <xs:element name="curves" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="curve" type="oidWithDescType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="pointEncodings" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="pointEncoding" type="xs:byte" minOccurs="0" maxOccurs="unbounded">
              <xs:annotation>
                <xs:documentation>
                  first byte of the encoded EC point
                </xs:documentation>
              </xs:annotation>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GostParametersType">
    <xs:sequence>
      <xs:element name="publicKeyParamSet" type="oidWithDescType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="digestParamSet" type="oidWithDescType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="encryptionParamSet" type="oidWithDescType" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="rdnType">
    <xs:sequence>
      <xs:element name="type" type="oidWithDescType"/>
      <xs:element name="minLen" type="xs:int" minOccurs="0"/>
      <xs:element name="maxLen" type="xs:int" minOccurs="0"/>
      <xs:element name="directoryStringType" type="DirectoryStringType" minOccurs="0"/>
      <xs:element name="regex" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="addPrefix" type="addTextType" minOccurs="0" maxOccurs="10"/>
      <xs:element name="addSuffix" type="addTextType" minOccurs="0" maxOccurs="10"/>
    </xs:sequence>
    <xs:attribute name="minOccurs" type="xs:int" default="1" use="optional"/>
    <xs:attribute name="maxOccurs" type="xs:int" default="1" use="optional"/>
  </xs:complexType>
  <xs:complexType name="addTextType">
    <xs:sequence>
      <xs:element name="condition" type="conditionType" minOccurs="0"/>
      <xs:element name="text" type="xs:string"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="DirectoryStringType">
    <xs:restriction base="xs:normalizedString">
        <xs:enumeration value="teletexString"/>
        <xs:enumeration value="printableString"/>
        <xs:enumeration value="utf8String"/>
        <xs:enumeration value="bmpString"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="conditionType">
    <xs:sequence>
      <xs:element name="envParam" type="envParamType" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="operator" type="operatorType" default="AND" use="optional"/>
  </xs:complexType>
  <xs:complexType name="envParamType">
    <xs:sequence>
      <xs:element name="name" type="xs:string"/>
      <xs:element name="value" type="xs:string">
        <xs:annotation>
          <xs:documentation>Specify empty content if the environment parameter is not set</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RdnConstraintType">
    <xs:all>
      <xs:element name="regex" type="xs:string"/>
    </xs:all>
  </xs:complexType>
  <xs:complexType name="extensionType">
    <xs:annotation>
      <xs:documentation>
        Critical will be considered if both values (true and false) are allowed,
        otherwise it will be ignored
      </xs:documentation>
    </xs:annotation>
    <xs:complexContent>
      <xs:extension base="oidWithDescType">
        <xs:attribute name="critical" type="xs:boolean" use="required"/>
        <xs:attribute name="required" type="xs:boolean" use="required"/>
        <xs:attribute name="permittedInRequest" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="extensionsType">
    <xs:sequence>
      <xs:element name="extension" type="extensionType" minOccurs="1" maxOccurs="unbounded"/>
      <xs:element name="pathLen" type="xs:int" minOccurs="0"/>
      <xs:element name="authorityKeyIdentifier" minOccurs="0">
        <xs:complexType>
          <xs:all>
            <xs:element name="includeIssuerAndSerial" type="xs:boolean" minOccurs="0"/>
          </xs:all>
        </xs:complexType>
      </xs:element>
      <xs:element name="keyUsage" minOccurs="0" maxOccurs="10">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="usage" type="keyUsageType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="certificatePolicies" minOccurs="0" maxOccurs="10">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="certificatePolicyInformation" type="certificatePolicyInformationType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="policyMappings" minOccurs="0" maxOccurs="10">
        <xs:annotation>
          <xs:documentation>
            Only for CA
          </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="mapping" type="policyIdMappingType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="nameConstraints" minOccurs="0" maxOccurs="10">
        <xs:annotation>
          <xs:documentation>
            Only for CA, at least one of permittedSubtrees and excludedSubtrees must be present
          </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="permittedSubtrees" type="generalSubtreesType" minOccurs="0"/>
            <xs:element name="excludedSubtrees" type="generalSubtreesType" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="policyConstraints" minOccurs="0" maxOccurs="10">
        <xs:annotation>
          <xs:documentation>
            Only for CA, at least one of requireExplicitPolicy and inhibitPolicyMapping must be present
          </xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="requireExplicitPolicy" type="xs:int" minOccurs="0"/>
            <xs:element name="inhibitPolicyMapping" type="xs:int" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="extendedKeyUsage" minOccurs="0" maxOccurs="10">
        <xs:annotation>
          <xs:documentation>Only for CA</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="usage" maxOccurs="unbounded">
              <xs:complexType>
                <xs:complexContent>
			      <xs:extension base="oidWithDescType">
                    <xs:attribute name="required" type="xs:boolean" use="required"/>
	              </xs:extension>
			    </xs:complexContent>
              </xs:complexType>
            </xs:element>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="inhibitAnyPolicy" minOccurs="0" maxOccurs="10">
        <xs:annotation>
          <xs:documentation>Only for CA</xs:documentation>
        </xs:annotation>
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="skipCerts" type="xs:int"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="admission" minOccurs="0" maxOccurs="10">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="condition" type="conditionType" minOccurs="0"/>
            <xs:element name="professionOid" type="oidWithDescType" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="professionItem" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="registrationNumber" type="xs:string" minOccurs="0"/>
            <xs:element name="addProfessionInfo" type="xs:hexBinary" minOccurs="0"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="subjectAltName" type="generalNameType" minOccurs="0"/>
      <xs:element name="subjectInfoAccess" type="subjectInfoAccessType" minOccurs="0"/>
      <xs:element name="constantExtensions" minOccurs="0" maxOccurs="10">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="constantExtension" type="constantExtensionType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generalNameType">
    <xs:all>
      <xs:element name="rfc822Name" type="xs:string" minOccurs="0"/>
      <xs:element name="dNSName" type="xs:string" minOccurs="0"/>
      <xs:element name="directoryName" type="xs:string" minOccurs="0"/>
      <xs:element name="ediPartyName" type="xs:string" minOccurs="0"/>
      <xs:element name="uniformResourceIdentifier" type="xs:string" minOccurs="0"/>
      <xs:element name="iPAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="registeredID" type="xs:string" minOccurs="0"/>
      <xs:element name="otherName" minOccurs="0">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="type" type="oidWithDescType" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:all>
  </xs:complexType>
  <xs:complexType name="policyIdMappingType">
    <xs:sequence>
      <xs:element name="issuerDomainPolicy" type="oidWithDescType"/>
      <xs:element name="subjectDomainPolicy" type="oidWithDescType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generalSubtreesType">
    <xs:sequence>
      <xs:element name="base" type="generalSubtreeBaseType" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="generalSubtreeBaseType">
    <xs:choice>
      <xs:element name="rfc822Name" type="xs:string"/>
      <xs:element name="dNSName" type="xs:string"/>
      <xs:element name="directoryName" type="xs:string"/>
      <xs:element name="uri" type="xs:string"/>
      <xs:element name="ipAddress" type="xs:string"/>
    </xs:choice>
    <xs:attribute name="minimum" type="xs:int" use="optional"/>
    <xs:attribute name="maximum" type="xs:int" use="optional"/>
  </xs:complexType>
  <xs:complexType name="constantExtensionType">
    <xs:sequence>
      <xs:element name="condition" type="conditionType" minOccurs="0"/>
      <xs:element name="type" type="oidWithDescType"/>
      <xs:element name="value" type="xs:base64Binary"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="certificatePolicyInformationType">
    <xs:sequence>
      <xs:element name="policyIdentifier" type="oidWithDescType"/>
      <xs:element name="policyQualifiers" minOccurs="0">
        <xs:complexType>
          <xs:choice maxOccurs="unbounded">
            <xs:element name="cpsUri" type="xs:string"/>
            <xs:element name="userNotice" type="xs:string"/>
          </xs:choice>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="subjectInfoAccessType">
    <xs:sequence>
      <xs:element name="access" maxOccurs="unbounded">
        <xs:complexType>
          <xs:sequence>
            <xs:element name="accessMethod" type="oidWithDescType">
              <xs:annotation>
                <xs:documentation>Use the dummy oid 0.0.0.0 for the NULL accessMethod 
                </xs:documentation>
              </xs:annotation>
            </xs:element>
            <xs:element name="accessLocation" type="generalNameType"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="oidWithDescType">
    <xs:simpleContent>
      <xs:extension base="oidType">
        <xs:attribute name="description" type="xs:string" use="optional"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  <xs:complexType name="keyUsageType">
    <xs:simpleContent>
      <xs:extension base="keyUsageEnum">
        <xs:attribute name="required" type="xs:boolean" use="required"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>  
  <xs:simpleType name="oidType">
    <xs:restriction base="xs:token">
      <xs:pattern value="\d+(\.\d+)*"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="operatorType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OR"/>
      <xs:enumeration value="AND"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="keyUsageEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="digitalSignature"/>
      <xs:enumeration value="contentCommitment"/>
      <xs:enumeration value="keyEncipherment"/>
      <xs:enumeration value="dataEncipherment"/>
      <xs:enumeration value="keyAgreement"/>
      <xs:enumeration value="keyCertSign"/>
      <xs:enumeration value="cRLSign"/>
      <xs:enumeration value="encipherOnly"/>
      <xs:enumeration value="decipherOnly"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="anyType" mixed="true">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
       <xs:any processContents="lax"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>
