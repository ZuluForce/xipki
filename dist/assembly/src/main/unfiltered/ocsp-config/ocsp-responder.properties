## Responder signer configuration
signer.type = PKCS12
#RSA-PKCS1v15
signer.conf = password?1234%algo?SHA256withRSA%keystore?file:output/OCSP1.p12
#RSA-PSS
#signer.conf = password?1234%algo?SHA256withRSAandMGF1%keystore?file:output/OCSP1.p12
#ECDSA
#signer.conf = password?1234%algo?SHA256withECDSA%keystore?file:output/OCSP1.p12
signer.cert = output/OCSP1.der

#-----------------------------------------------------------------
#                       NONCE 
#-----------------------------------------------------------------
# Whether nonce is required
# The default is false
# req.nonce.required = false

# Minimal length of nonce
# The default is 4
# req.nonce.minlen = 4

# Maximal length of nonce
# The default is 32
# req.nonce.maxlen = 32

#-----------------------------------------------------------------
#                       Hash Algorithms
#-----------------------------------------------------------------
# Comma-separated hash algorithms in request to be supported
# The default is SHA1,SHA224,SHA256,SHA384,SHA512 
#req.hashalgos = SHA1,SHA224,SHA256,SHA384,SHA512

# CertHash algorithm in the response
# The default is not set which indicates that the hash algorithm in the request will
# be applied. 
# resp.certhash.algo = SHA1 

#-----------------------------------------------------------------
#                       OCSP STORES
#-----------------------------------------------------------------

## Database-based certificate store
## The default is enabled
dbstore.db1.enabled = true
dbstore.db1.confFile = ocsp-config/ocsp-publisher.properties
# Whether Certificate with known Issuer but unknown serial number 
# will be considered as good, the default is false
dbstore.db1.unknownSerialAsGood = false

## CRL-based certificate store
## The default is enabled
crlstore.crl1.enabled = true
# The default is true
crlstore.crl1.useUpdateDatesFromCRL=true
crlstore.crl1.unknownSerialAsGood = true
crlstore.crl1.crlFile = output/SubCAwithCRL1.crl
crlstore.crl1.cacertFile = output/SubCAwithCRL1.der
## Required if the CRL is an indrect CRL
#crlstore.crl1.issuerCertFile = output/CRLIssuer.der

